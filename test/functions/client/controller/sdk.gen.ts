// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetCommandsWithKeyData, GetCommandsWithKeyResponse, GetCommandsWithKeyError, AcknowledgeCommandWithKeyData, AcknowledgeCommandWithKeyResponse, AcknowledgeCommandWithKeyError, CreateDeviceReportWithKeyData, CreateDeviceReportWithKeyResponse, CreateDeviceReportWithKeyError, ValidateAssigneeWithKeyData, ValidateAssigneeWithKeyResponse, ValidateAssigneeWithKeyError, GetAssigneesData, GetAssigneesResponse, GetAssigneesError, CreateAssigneeData, CreateAssigneeResponse, CreateAssigneeError, DeleteAssigneeData, DeleteAssigneeResponse, DeleteAssigneeError, GetCommandsData, GetCommandsResponse, GetCommandsError, SendCommandData, SendCommandResponse, SendCommandError, ListDevicesData, ListDevicesResponse, ListDevicesError, CreateDeviceData, CreateDeviceResponse, CreateDeviceError, DeleteDeviceData, DeleteDeviceResponse, DeleteDeviceError, GetDeviceByIdData, GetDeviceByIdResponse, GetDeviceByIdError, ListDeviceEventsData, ListDeviceEventsResponse, ListDeviceEventsError, GetJobsData, GetJobsResponse, GetJobsError, GetJobByIdData, GetJobByIdResponse, GetJobByIdError, UpdateJobData, UpdateJobResponse, UpdateJobError, UpdateJobStatusData, UpdateJobStatusResponse, UpdateJobStatusError, GetDeviceJobsData, GetDeviceJobsResponse, GetDeviceJobsError, CreateJobData, CreateJobResponse, CreateJobError, GetLocationsData, GetLocationsResponse, GetLocationsError, CreateLocationData, CreateLocationResponse, CreateLocationError, DeleteLocationData, DeleteLocationResponse, DeleteLocationError, CreateDeviceReportData, CreateDeviceReportResponse, GetUsersData, GetUsersResponse, GetUsersError, CreateUserData, CreateUserResponse, CreateUserError, DeleteUserData, DeleteUserResponse, DeleteUserError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get device commands by API key
 */
export const getCommandsWithKey = <ThrowOnError extends boolean = false>(options?: Options<GetCommandsWithKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCommandsWithKeyResponse, GetCommandsWithKeyError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/v1.0/command',
        ...options
    });
};

/**
 * Acknowledge a command by API key
 */
export const acknowledgeCommandWithKey = <ThrowOnError extends boolean = false>(options?: Options<AcknowledgeCommandWithKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AcknowledgeCommandWithKeyResponse, AcknowledgeCommandWithKeyError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/v1.0/acknowledgement',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create a device report by API key
 */
export const createDeviceReportWithKey = <ThrowOnError extends boolean = false>(options?: Options<CreateDeviceReportWithKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateDeviceReportWithKeyResponse, CreateDeviceReportWithKeyError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/v1.0/report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Validate an assignee by API key
 */
export const validateAssigneeWithKey = <ThrowOnError extends boolean = false>(options?: Options<ValidateAssigneeWithKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ValidateAssigneeWithKeyResponse, ValidateAssigneeWithKeyError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/v1.0/validation/assignee',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all assignees
 */
export const getAssignees = <ThrowOnError extends boolean = false>(options?: Options<GetAssigneesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAssigneesResponse, GetAssigneesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/assignee',
        ...options
    });
};

/**
 * Create an assignee
 */
export const createAssignee = <ThrowOnError extends boolean = false>(options?: Options<CreateAssigneeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateAssigneeResponse, CreateAssigneeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/assignee',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an assignee
 */
export const deleteAssignee = <ThrowOnError extends boolean = false>(options: Options<DeleteAssigneeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssigneeResponse, DeleteAssigneeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/assignee/{assigneeId}',
        ...options
    });
};

/**
 * Get device commands
 */
export const getCommands = <ThrowOnError extends boolean = false>(options: Options<GetCommandsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCommandsResponse, GetCommandsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1.0/device/{deviceId}/command',
        ...options
    });
};

/**
 * Send command to device
 */
export const sendCommand = <ThrowOnError extends boolean = false>(options: Options<SendCommandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendCommandResponse, SendCommandError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device/{deviceId}/command',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Devices
 */
export const listDevices = <ThrowOnError extends boolean = false>(options?: Options<ListDevicesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListDevicesResponse, ListDevicesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device',
        ...options
    });
};

/**
 * Create Device
 */
export const createDevice = <ThrowOnError extends boolean = false>(options?: Options<CreateDeviceData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateDeviceResponse, CreateDeviceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete Device
 */
export const deleteDevice = <ThrowOnError extends boolean = false>(options: Options<DeleteDeviceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDeviceResponse, DeleteDeviceError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device/{deviceId}',
        ...options
    });
};

/**
 * Get Device
 */
export const getDeviceById = <ThrowOnError extends boolean = false>(options: Options<GetDeviceByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeviceByIdResponse, GetDeviceByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device/{deviceId}',
        ...options
    });
};

/**
 * List Device Events
 */
export const listDeviceEvents = <ThrowOnError extends boolean = false>(options: Options<ListDeviceEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDeviceEventsResponse, ListDeviceEventsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device/{deviceId}/event',
        ...options
    });
};

/**
 * Get all jobs
 */
export const getJobs = <ThrowOnError extends boolean = false>(options?: Options<GetJobsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJobsResponse, GetJobsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/job',
        ...options
    });
};

/**
 * Get a job
 */
export const getJobById = <ThrowOnError extends boolean = false>(options: Options<GetJobByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetJobByIdResponse, GetJobByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/job/{jobId}',
        ...options
    });
};

/**
 * Update a job
 */
export const updateJob = <ThrowOnError extends boolean = false>(options: Options<UpdateJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateJobResponse, UpdateJobError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/job/{jobId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a job status
 */
export const updateJobStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateJobStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateJobStatusResponse, UpdateJobStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/job/{jobId}/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all jobs
 */
export const getDeviceJobs = <ThrowOnError extends boolean = false>(options: Options<GetDeviceJobsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDeviceJobsResponse, GetDeviceJobsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device/{deviceId}/job',
        ...options
    });
};

/**
 * Create a job
 */
export const createJob = <ThrowOnError extends boolean = false>(options: Options<CreateJobData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateJobResponse, CreateJobError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/device/{deviceId}/job',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all locations
 */
export const getLocations = <ThrowOnError extends boolean = false>(options?: Options<GetLocationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLocationsResponse, GetLocationsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/location',
        ...options
    });
};

/**
 * Create a location
 */
export const createLocation = <ThrowOnError extends boolean = false>(options?: Options<CreateLocationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateLocationResponse, CreateLocationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/location',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a location
 */
export const deleteLocation = <ThrowOnError extends boolean = false>(options: Options<DeleteLocationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLocationResponse, DeleteLocationError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/location/{locationId}',
        ...options
    });
};

/**
 * Create a device report
 */
export const createDeviceReport = <ThrowOnError extends boolean = false>(options: Options<CreateDeviceReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDeviceReportResponse, unknown, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/v1.0/device/{deviceId}/report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all user
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user',
        ...options
    });
};

/**
 * Create an user
 */
export const createUser = <ThrowOnError extends boolean = false>(options?: Options<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete an user
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user/{userId}',
        ...options
    });
};