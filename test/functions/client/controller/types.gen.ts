// This file is auto-generated by @hey-api/openapi-ts

export type BaseUser = {
    userNumber: string;
    name: string;
    location: string;
};

export type User = BaseUser & {
    userId: string;
    createdAt: string;
    job: Array<{
        jobId: string;
    }>;
};

export type BaseAssignee = {
    username: string;
    location: string;
};

export type AssigneeRequest = BaseAssignee & {
    passcode: string;
};

export type Assignee = BaseAssignee & {
    assigneeId: string;
    assigneeCode: string;
};

export type BaseLocation = {
    name: string;
};

export type Location = BaseLocation & {
    locationId: string;
    device: Array<{
        deviceId?: string;
    }>;
};

export type ChannelLimit = {
    /**
     * TENS_CH1_Intensity_Limit
     */
    ch1: number;
    /**
     * TENS_CH2_Intensity_Limit
     */
    ch2: number;
    /**
     * TENS_CH3_Intensity_Limit
     */
    ch3: number;
    /**
     * TENS_CH4_Intensity_Limit
     */
    ch4: number;
};

export type Channel = {
    /**
     * Actual_TENS_CH1_Intensity
     */
    ch1: number;
    /**
     * Actual_TENS_CH2_Intensity
     */
    ch2: number;
    /**
     * Actual_TENS_CH3_Intensity
     */
    ch3: number;
    /**
     * Actual_TENS_CH4_Intensity
     */
    ch4: number;
};

export type BiChannelLimit = {
    /**
     * TENS_CH1_Heat_Limit: 0:L/1:M/2:H
     */
    ch1: 0 | 1 | 2;
    /**
     * TENS_CH2_Heat_Limit: 0:L/1:M/2:H
     */
    ch2: 0 | 1 | 2;
};

export type BiChannel = {
    /**
     * Actual_TENS_CH1_Temperature: 0=1/1=M/2=H
     */
    ch1: 0 | 1 | 2;
    /**
     * Actual_TENS_CH2_Temperature: 0=1/1=M/2=H
     */
    ch2: 0 | 1 | 2;
};

export type SnapshotTime = {
    startedAt: string;
    timeRemain: {
        value: number;
        unit: 'minute' | 'second';
    };
};

export type Acknowledgement = {
    type: 'acknowledgement';
    detail: {
        commandId: Array<string>;
    };
};

export type UltrasoundSetting = {
    /**
     * Ultrasound_Scheme_Enable
     */
    scheme: '1mContinuous' | '3mContinuous' | '1mPulse' | '3mPulse';
    intensityLimit: {
        /**
         * Ultrasound_Intensity_Limit_1MC
         */
        '1MC': number;
        /**
         * Ultrasound_Intensity_Limit_3MC
         */
        '3MC': number;
        /**
         * Ultrasound_Intensity_Limit_1MP
         */
        '1MP': number;
        /**
         * Ultrasound_Intensity_Limit_3MP
         */
        '3MP': number;
    };
    /**
     * Ultrasound_Pulse_Frequency: 0=10Hz/1=20Hz/2=50Hz/3=100Hz
     */
    pulseFrequencyInHz: {
        '1M': 0 | 1 | 2 | 3;
        '3M': 0 | 1 | 2 | 3;
    };
    /**
     * Ultrasound_Pulse_Duty_Ratio: 0=1:1/1=1:2/2=1:50/3=1:10
     */
    pulseDutyRatio: {
        '1M': '1:1' | '1:2' | '1:50' | '1:10';
        '3M': '1:1' | '1:2' | '1:50' | '1:10';
    };
    /**
     * Ultrasound_Temperature_Threshold
     */
    temperatureThreshold: number;
};

export type TensSetting = {
    /**
     * TENS_Waveform_Enable
     */
    waveform: 1 | 2 | 3 | 4 | 5 | 6;
    /**
     * TENS_Channel_Enable
     */
    channel: 1 | 2 | 3 | 4;
    intensitylimit: ChannelLimit;
    heatLimit: BiChannelLimit;
};

/**
 * Treatment_Plan_Enable
 */
export type ProPlanSetting = {
    /**
     * TENS
     */
    tens: 0 | 10 | 20 | 30;
    /**
     * Ultrasound
     */
    ultrasound: 0 | 10 | 20 | 30;
};

export type ProSetting = {
    plan: ProPlanSetting;
    ultrasoundSetting: UltrasoundSetting;
    tensSetting: TensSetting;
};

export type BaseJob = {
    treatmentPlan: {
        type: 'pro';
        detail: ProSetting;
    };
};

export type BaseJobWithAssignee = BaseJob & {
    assigneeId: string;
    userId: string;
};

export type BaseJobWithAssigneeWithDeviceId = BaseJobWithAssignee & {
    deviceId: string;
};

export type BaseJobWithJobId = BaseJob & {
    jobId: string;
};

export type JobUpdateStatus = {
    status: 'play' | 'frozen' | 'cancelled';
};

export type BaseJobWithJobIdAndAssigneeAndStatus = BaseJobWithJobId & {
    userId: string;
    assigneeId: string;
    status: 'pending' | 'standby' | 'play' | 'frozen' | 'complete' | 'cancelled' | 'abnormal';
};

export type BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId = BaseJobWithJobIdAndAssigneeAndStatus & {
    deviceId: string;
};

export type TreatmentWithJobIdAndStatusAndAssigneeAndDeviceId = {
    detail: {
        treatment: TreatmentSnapshot;
    };
    userId: string;
    deviceId: string;
    assigneeId: string;
    status: 'pending' | 'standby' | 'play' | 'frozen' | 'complete' | 'cancelled' | 'abnormal';
    jobId: string;
};

export type TreatmentPlanWithJobIdAndStatusAndAssigneeAndDeviceId = {
    detail: BaseJob;
    deviceId: string;
    userId: string;
    assigneeId: string;
    status: 'pending' | 'standby' | 'play' | 'frozen' | 'complete' | 'cancelled' | 'abnormal';
    jobId: string;
};

export type ErrorWithJobIdAndStatusAndAssigneeAndDeviceId = {
    detail: DeviceError;
    deviceId: string;
    userId: string;
    assigneeId: string;
    status: 'pending' | 'standby' | 'play' | 'frozen' | 'complete' | 'cancelled' | 'abnormal';
    jobId: string;
};

export type BaseJobWithJobIdAndStatusAndAssigneeAndDeviceIdAndHistory = BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId & {
    jobHistory: Array<(TreatmentPlanWithJobIdAndStatusAndAssigneeAndDeviceId | TreatmentWithJobIdAndStatusAndAssigneeAndDeviceId | ErrorWithJobIdAndStatusAndAssigneeAndDeviceId) & {
        jobHistoryId: string;
        author: string;
        type: string;
    }>;
};

export type AssigneeAtJob = {
    username: string;
    hash: string;
};

export type JobDetail = BaseJobWithJobId & {
    action: 'create' | 'update';
    assignee: AssigneeAtJob;
};

export type JobAction = {
    action: 'freeze' | 'play' | 'cancel';
    jobId: string;
};

export type Ping = {
    command: 'ping';
};

export type BaseCommand = {
    command: JobDetail | JobAction | Ping;
};

export type Command = BaseCommand & {
    id: string;
    createDate: string;
};

export type CommandWithStatus = Command & {
    status: 'pending' | 'acknowledged';
};

export type UltrasoundSnapshot = {
    /**
     * Ultrasound_Scheme_Selected
     */
    scheme: '1mContinuous' | '3mContinuous' | '1mPulse' | '3mPulse';
    /**
     * Actual_Ultrasound_Intensity
     */
    intensity: number;
    /**
     * Actual_Ultrasound_Pulse_Frequency: 0=10Hz/1=20Hz/2=50Hz/3=100Hz
     */
    pulseFrequencyInHz: 0 | 1 | 2 | 3;
    /**
     * Actual_Ultrasound_Pulse_Duty_Ratio: 0=1:1/1=1:2/2=1:50/3=1:10
     */
    pulseDutyRatio: '1:1' | '1:2' | '1:50' | '1:10';
    /**
     * Actual_Ultrasound_Temperature: 数据范围 = 0-119; 0=-20°C; 119=99°C
     */
    temperature: number;
    time: SnapshotTime;
};

export type TensSnapshot = {
    /**
     * Actual_TENS_Waveform
     */
    waveform: number;
    /**
     * Actual_TENS_Channel_Selected
     */
    channel: number;
    intensity: Channel;
    temperature: BiChannel;
    time: SnapshotTime;
};

/**
 * Treatment_Plan_Selected
 */
export type ProPlanSnapshot = {
    /**
     * TENS
     */
    tens: 0 | 10 | 20 | 30;
    /**
     * Ultrasound
     */
    ultrasound: 0 | 10 | 20 | 30;
};

export type ProSnapshot = {
    plan: ProPlanSnapshot;
    ultrasoundSnapshot: UltrasoundSnapshot;
    tensSnapshot: TensSnapshot;
};

export type TreatmentSnapshot = {
    type: 'pro';
    detail: ProSnapshot;
};

export type JobHistory = {
    type: 'interim' | 'completion';
    jobId: string;
    detail: {
        assigneeUsername: string;
        status: 'standby' | 'play' | 'frozen' | 'complete' | 'cancelled' | 'abnormal';
        treatment: TreatmentSnapshot;
    };
};

export type DeviceError = {
    error: 'ultrasoundOverheat' | 'tensCh1Shorted' | 'tensCh2Shorted' | 'tensCh3Shorted' | 'tensCh4Shorted';
    startedAt: string;
    endedAt?: string;
};

export type ErrorHistory = {
    detail: DeviceError;
    type: 'error';
    jobId: string;
};

export type DeviceReport = {
    detail: Array<JobHistory | ErrorHistory>;
};

export type BaseDevice = {
    code: string;
    type: string;
    location: string;
};

export type DeviceStatus = {
    status: 'online' | 'offline' | 'unknown';
};

export type DeviceHistory = {
    datetime: string;
    detail: DeviceStatus;
};

export type Device = BaseDevice & {
    deviceId: string;
    passcode?: string;
    status: string;
    deviceHistory: Array<DeviceHistory>;
};

export type DeviceRequest = BaseDevice & {
    passcode: string;
};

export type ValidateAssignee = {
    username: string;
    password: string;
};

export type _Error = {
    error_code: string;
    error_message: string;
};

export type ConnectivityBase = {
    code: number;
    message: string;
};

export type ConnectivityError = ConnectivityBase & {
    object: {
        [key: string]: unknown;
    } | null;
};

export type UserIdPath = string;

export type LocationIdPath = string;

export type AssigneeIdPath = string;

export type DeviceIdPath = string;

export type JobIdPath = string;

export type JobId = string;

export type DeviceId = string;

export type CommandId = string;

/**
 * Command status
 */
export type CommandStatus = Array<'pending' | 'acknowledged'>;

/**
 * Include deleted
 */
export type IncludeDeleted = boolean;

export type GetCommandsWithKeyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1.0/command';
};

export type GetCommandsWithKeyErrors = {
    400: ConnectivityError;
    401: ConnectivityError;
    403: ConnectivityError;
    404: ConnectivityError;
    500: ConnectivityError;
};

export type GetCommandsWithKeyError = GetCommandsWithKeyErrors[keyof GetCommandsWithKeyErrors];

export type GetCommandsWithKeyResponses = {
    200: ConnectivityBase & {
        object: {
            command: Array<Command>;
        };
    };
};

export type GetCommandsWithKeyResponse = GetCommandsWithKeyResponses[keyof GetCommandsWithKeyResponses];

export type AcknowledgeCommandWithKeyData = {
    body?: Acknowledgement;
    path?: never;
    query?: never;
    url: '/v1.0/acknowledgement';
};

export type AcknowledgeCommandWithKeyErrors = {
    400: ConnectivityError;
    401: ConnectivityError;
    403: ConnectivityError;
    404: ConnectivityError;
    500: ConnectivityError;
};

export type AcknowledgeCommandWithKeyError = AcknowledgeCommandWithKeyErrors[keyof AcknowledgeCommandWithKeyErrors];

export type AcknowledgeCommandWithKeyResponses = {
    200: ConnectivityBase & {
        object: Acknowledgement;
    };
};

export type AcknowledgeCommandWithKeyResponse = AcknowledgeCommandWithKeyResponses[keyof AcknowledgeCommandWithKeyResponses];

export type CreateDeviceReportWithKeyData = {
    body?: DeviceReport;
    path?: never;
    query?: never;
    url: '/v1.0/report';
};

export type CreateDeviceReportWithKeyErrors = {
    400: ConnectivityError;
    401: ConnectivityError;
    403: ConnectivityError;
    404: ConnectivityError;
    500: ConnectivityError;
};

export type CreateDeviceReportWithKeyError = CreateDeviceReportWithKeyErrors[keyof CreateDeviceReportWithKeyErrors];

export type CreateDeviceReportWithKeyResponses = {
    201: ConnectivityBase & {
        object: {
            reportId: string;
        };
    };
};

export type CreateDeviceReportWithKeyResponse = CreateDeviceReportWithKeyResponses[keyof CreateDeviceReportWithKeyResponses];

export type ValidateAssigneeWithKeyData = {
    body?: ValidateAssignee;
    path?: never;
    query?: never;
    url: '/v1.0/validation/assignee';
};

export type ValidateAssigneeWithKeyErrors = {
    400: ConnectivityError;
    401: ConnectivityError;
    403: ConnectivityError;
    404: ConnectivityError;
    500: ConnectivityError;
};

export type ValidateAssigneeWithKeyError = ValidateAssigneeWithKeyErrors[keyof ValidateAssigneeWithKeyErrors];

export type ValidateAssigneeWithKeyResponses = {
    200: ConnectivityBase & {
        object: {
            valid: boolean;
        };
    };
};

export type ValidateAssigneeWithKeyResponse = ValidateAssigneeWithKeyResponses[keyof ValidateAssigneeWithKeyResponses];

export type GetAssigneesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted
         */
        includeDeleted?: boolean;
    };
    url: '/v1.0/assignee';
};

export type GetAssigneesErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetAssigneesError = GetAssigneesErrors[keyof GetAssigneesErrors];

export type GetAssigneesResponses = {
    /**
     * Assignees found
     */
    200: {
        assignee: Array<Assignee>;
    };
};

export type GetAssigneesResponse = GetAssigneesResponses[keyof GetAssigneesResponses];

export type CreateAssigneeData = {
    body?: AssigneeRequest;
    path?: never;
    query?: never;
    url: '/v1.0/assignee';
};

export type CreateAssigneeErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type CreateAssigneeError = CreateAssigneeErrors[keyof CreateAssigneeErrors];

export type CreateAssigneeResponses = {
    /**
     * Assignee created
     */
    201: Assignee;
};

export type CreateAssigneeResponse = CreateAssigneeResponses[keyof CreateAssigneeResponses];

export type DeleteAssigneeData = {
    body?: never;
    path: {
        assigneeId: string;
    };
    query?: never;
    url: '/v1.0/assignee/{assigneeId}';
};

export type DeleteAssigneeErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type DeleteAssigneeError = DeleteAssigneeErrors[keyof DeleteAssigneeErrors];

export type DeleteAssigneeResponses = {
    /**
     * Assignee deleted
     */
    200: {
        assigneeId: string;
    };
};

export type DeleteAssigneeResponse = DeleteAssigneeResponses[keyof DeleteAssigneeResponses];

export type GetCommandsData = {
    body?: never;
    path: {
        deviceId: string;
    };
    query?: {
        /**
         * Command status
         */
        status?: Array<'pending' | 'acknowledged'>;
    };
    url: '/v1.0/device/{deviceId}/command';
};

export type GetCommandsErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetCommandsError = GetCommandsErrors[keyof GetCommandsErrors];

export type GetCommandsResponses = {
    200: {
        command: Array<CommandWithStatus>;
    };
};

export type GetCommandsResponse = GetCommandsResponses[keyof GetCommandsResponses];

export type SendCommandData = {
    body?: BaseCommand;
    path: {
        deviceId: string;
    };
    query?: never;
    url: '/v1.0/device/{deviceId}/command';
};

export type SendCommandErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type SendCommandError = SendCommandErrors[keyof SendCommandErrors];

export type SendCommandResponses = {
    201: {
        commandId?: string;
    };
};

export type SendCommandResponse = SendCommandResponses[keyof SendCommandResponses];

export type ListDevicesData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted
         */
        includeDeleted?: boolean;
    };
    url: '/v1.0/device';
};

export type ListDevicesErrors = {
    401: _Error;
    403: _Error;
    500: _Error;
};

export type ListDevicesError = ListDevicesErrors[keyof ListDevicesErrors];

export type ListDevicesResponses = {
    200: {
        devices: Array<Device>;
    };
};

export type ListDevicesResponse = ListDevicesResponses[keyof ListDevicesResponses];

export type CreateDeviceData = {
    body?: DeviceRequest;
    path?: never;
    query?: never;
    url: '/v1.0/device';
};

export type CreateDeviceErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    500: _Error;
};

export type CreateDeviceError = CreateDeviceErrors[keyof CreateDeviceErrors];

export type CreateDeviceResponses = {
    201: {
        deviceId?: string;
    };
};

export type CreateDeviceResponse = CreateDeviceResponses[keyof CreateDeviceResponses];

export type DeleteDeviceData = {
    body?: never;
    path: {
        deviceId: string;
    };
    query?: never;
    url: '/v1.0/device/{deviceId}';
};

export type DeleteDeviceErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type DeleteDeviceError = DeleteDeviceErrors[keyof DeleteDeviceErrors];

export type DeleteDeviceResponses = {
    200: {
        deviceId: string;
    };
};

export type DeleteDeviceResponse = DeleteDeviceResponses[keyof DeleteDeviceResponses];

export type GetDeviceByIdData = {
    body?: never;
    path: {
        deviceId: string;
    };
    query?: never;
    url: '/v1.0/device/{deviceId}';
};

export type GetDeviceByIdErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetDeviceByIdError = GetDeviceByIdErrors[keyof GetDeviceByIdErrors];

export type GetDeviceByIdResponses = {
    200: Device;
};

export type GetDeviceByIdResponse = GetDeviceByIdResponses[keyof GetDeviceByIdResponses];

export type GetJobsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v1.0/job';
};

export type GetJobsErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetJobsError = GetJobsErrors[keyof GetJobsErrors];

export type GetJobsResponses = {
    /**
     * Jobs retrieved
     */
    200: {
        job?: Array<BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId>;
    };
};

export type GetJobsResponse = GetJobsResponses[keyof GetJobsResponses];

export type GetJobByIdData = {
    body?: never;
    path: {
        jobId: string;
    };
    query?: never;
    url: '/v1.0/job/{jobId}';
};

export type GetJobByIdErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetJobByIdError = GetJobByIdErrors[keyof GetJobByIdErrors];

export type GetJobByIdResponses = {
    /**
     * Job retrieved
     */
    200: BaseJobWithJobIdAndStatusAndAssigneeAndDeviceIdAndHistory;
};

export type GetJobByIdResponse = GetJobByIdResponses[keyof GetJobByIdResponses];

export type UpdateJobData = {
    body?: BaseJobWithAssigneeWithDeviceId;
    path: {
        jobId: string;
    };
    query?: never;
    url: '/v1.0/job/{jobId}';
};

export type UpdateJobErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type UpdateJobError = UpdateJobErrors[keyof UpdateJobErrors];

export type UpdateJobResponses = {
    /**
     * Job updated
     */
    200: BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId;
};

export type UpdateJobResponse = UpdateJobResponses[keyof UpdateJobResponses];

export type UpdateJobStatusData = {
    body?: JobUpdateStatus;
    path: {
        jobId: string;
    };
    query?: never;
    url: '/v1.0/job/{jobId}/status';
};

export type UpdateJobStatusErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type UpdateJobStatusError = UpdateJobStatusErrors[keyof UpdateJobStatusErrors];

export type UpdateJobStatusResponses = {
    /**
     * Job updated
     */
    200: JobUpdateStatus;
};

export type UpdateJobStatusResponse = UpdateJobStatusResponses[keyof UpdateJobStatusResponses];

export type GetDeviceJobsData = {
    body?: never;
    path: {
        deviceId: string;
    };
    query?: never;
    url: '/v1.0/device/{deviceId}/job';
};

export type GetDeviceJobsErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetDeviceJobsError = GetDeviceJobsErrors[keyof GetDeviceJobsErrors];

export type GetDeviceJobsResponses = {
    /**
     * Jobs retrieved
     */
    200: {
        job: Array<BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId>;
    };
};

export type GetDeviceJobsResponse = GetDeviceJobsResponses[keyof GetDeviceJobsResponses];

export type CreateJobData = {
    body?: BaseJobWithAssignee;
    path: {
        deviceId: string;
    };
    query?: never;
    url: '/v1.0/device/{deviceId}/job';
};

export type CreateJobErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type CreateJobError = CreateJobErrors[keyof CreateJobErrors];

export type CreateJobResponses = {
    /**
     * Job created
     */
    201: BaseJobWithJobIdAndStatusAndAssigneeAndDeviceId;
};

export type CreateJobResponse = CreateJobResponses[keyof CreateJobResponses];

export type GetLocationsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted
         */
        includeDeleted?: boolean;
    };
    url: '/v1.0/location';
};

export type GetLocationsErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetLocationsError = GetLocationsErrors[keyof GetLocationsErrors];

export type GetLocationsResponses = {
    /**
     * Locations found
     */
    200: {
        location?: Array<Location>;
    };
};

export type GetLocationsResponse = GetLocationsResponses[keyof GetLocationsResponses];

export type CreateLocationData = {
    body?: BaseLocation;
    path?: never;
    query?: never;
    url: '/v1.0/location';
};

export type CreateLocationErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type CreateLocationError = CreateLocationErrors[keyof CreateLocationErrors];

export type CreateLocationResponses = {
    /**
     * Location created
     */
    201: Location;
};

export type CreateLocationResponse = CreateLocationResponses[keyof CreateLocationResponses];

export type DeleteLocationData = {
    body?: never;
    path: {
        locationId: string;
    };
    query?: never;
    url: '/v1.0/location/{locationId}';
};

export type DeleteLocationErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type DeleteLocationError = DeleteLocationErrors[keyof DeleteLocationErrors];

export type DeleteLocationResponses = {
    /**
     * Location deleted
     */
    200: {
        locationId: string;
    };
};

export type DeleteLocationResponse = DeleteLocationResponses[keyof DeleteLocationResponses];

export type CreateDeviceReportData = {
    body?: DeviceReport;
    path: {
        deviceId: string;
    };
    query?: never;
    url: '/v1.0/device/{deviceId}/report';
};

export type CreateDeviceReportResponses = {
    201: {
        reportId?: string;
    };
};

export type CreateDeviceReportResponse = CreateDeviceReportResponses[keyof CreateDeviceReportResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Include deleted
         */
        includeDeleted?: boolean;
    };
    url: '/v1.0/user';
};

export type GetUsersErrors = {
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type GetUsersError = GetUsersErrors[keyof GetUsersErrors];

export type GetUsersResponses = {
    /**
     * Users found
     */
    200: {
        user: Array<User>;
    };
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type CreateUserData = {
    body?: BaseUser;
    path?: never;
    query?: never;
    url: '/v1.0/user';
};

export type CreateUserErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * User created
     */
    201: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type DeleteUserData = {
    body?: never;
    path: {
        userId: string;
    };
    query?: never;
    url: '/v1.0/user/{userId}';
};

export type DeleteUserErrors = {
    400: _Error;
    401: _Error;
    403: _Error;
    404: _Error;
    500: _Error;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * User deleted
     */
    200: {
        userId: string;
    };
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type ClientOptions = {
    baseURL: 'https://api-ext.acme-local.online:22233/controller' | 'http://localhost:22223/controller' | 'https://{environment}.acme-local.online/controller' | (string & {});
};