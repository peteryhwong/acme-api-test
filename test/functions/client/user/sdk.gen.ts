// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { GetPublicKeyData, GetPublicKeyResponse, GetUsersData, GetUsersResponse, GetUsersError, CreateUserData, CreateUserResponse, CreateUserError, CreateTokenData, CreateTokenResponse, CreateTokenError, UpdatePasswordData, UpdatePasswordResponse, UpdatePasswordError, AddRoleData, AddRoleResponse, AddRoleError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Public Key
 */
export const getPublicKey = <ThrowOnError extends boolean = false>(options?: Options<GetPublicKeyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetPublicKeyResponse, unknown, ThrowOnError>({
        url: '/v1.0/key',
        ...options
    });
};

/**
 * Get user
 */
export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponse, GetUsersError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user',
        ...options
    });
};

/**
 * Create user
 */
export const createUser = <ThrowOnError extends boolean = false>(options?: Options<CreateUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create token
 */
export const createToken = <ThrowOnError extends boolean = false>(options?: Options<CreateTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateTokenResponse, CreateTokenError, ThrowOnError>({
        url: '/v1.0/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update password
 */
export const updatePassword = <ThrowOnError extends boolean = false>(options: Options<UpdatePasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePasswordResponse, UpdatePasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user/{userId}/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add role
 */
export const addRole = <ThrowOnError extends boolean = false>(options: Options<AddRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRoleResponse, AddRoleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1.0/user/{userId}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};